# Ansible playbook that installs a python version and sets up a venv under
# the current working directory.
#
# This playbook will install the python version including pip, then
# install the virtualenv package globally via pip and finally setup a new
# empty venv under {{ working_directory }}/{{ python_venv_dirname }} if no such
# venv exists already. Furthermore the `IP_EXTRA_INDEX_URL` and `IP_PREFER_BINARY` variables
# will be set to pull from IBMs ppc64le repository for better package support.
#
# After executing this playbook the variables `venv_dir`, `venv_pip` and `venv_python` will be available to use the venv.
# To run a simple python command in the venv without activating it use the python executable
# inside the venv; for example:
# ```ansible
# - ansible.builtin.command:
#     cmd: "{{ venv_python }} main.py"
# ```
#
# Parameters:
# - python_version (str): The python version to install in dot form (e.g. 3.12)
# - working_directory (path): The directory into which a venv should be installed
#
# Outputs:
# - venv_dir (path): Main directory of the venv.
# - venv_python (path): The python executable of the venv. Can be run without prior venv activation.
# - venv_pip (path):  The pip executable of the venv. Also accessible without venv activation
# - venv_bin (path): The path to the bin directory of the venv which contains all python cli tools.
---
- name: Setup project venv
  hosts: all
  vars:
    pip_env:
      PIP_EXTRA_INDEX_URL: "https://wheels.developerfirst.ibm.com/ppc64le/linux  https://repo.fury.io/mgiessing"
      PIP_PREFER_BINARY: "1"
  tasks:

    - name: Install python {{ python_version }}
      become: true
      become_user: root
      ansible.builtin.dnf:
        name:
          - python{{ python_version }}
          - python{{ python_version }}-devel
          - python{{ python_version }}-pip
        state: present

    - name: Install virtualenv
      ansible.builtin.pip:
        name: virtualenv
        executable: pip{{ python_version }}
        state: present

    - name: Check venv presence
      ansible.builtin.stat:
        path: "{{ working_directory }}/{{ python_venv_dirname | default('.venv') }}/bin/activate"
      register: venv_present

    - name: Create venv in {{ working_directory }}/{{ python_venv_dirname | default('.venv') }}/
      ansible.builtin.pip:
        name:
          - pip
        virtualenv: "{{ working_directory }}/{{ python_venv_dirname | default('.venv') }}/"
        virtualenv_python: python{{ python_version }}
        state: present
      when: not venv_present.stat.exists

    # Adding PIP variable adaptions when activating as inspired by
    # https://stackoverflow.com/a/69119730/7976470
    - name: Add pip environment config to venv
      ansible.builtin.blockinfile:
        path: "{{ working_directory }}/{{ python_venv_dirname | default('.venv') }}/bin/activate"
        block: |
          if [ -n "${PIP_PREFER_BINARY:-}" ] ; then
              _OLD_PIP_BINARY="${PIP_PREFER_BINARY:-}"
          fi
          export PIP_PREFER_BINARY=1
          if [ -n "${PIP_EXTRA_INDEX_URL:-}" ] ; then
              _OLD_PIP_INDEX="${PIP_EXTRA_INDEX_URL:-}"
          fi
          export PIP_EXTRA_INDEX_URL="{{ pip_env.PIP_EXTRA_INDEX_URL }}"
        state: present
        insertafter: EOF
        marker: "# {mark} activate block"  # marker is required for multiple blocks on same file.
        append_newline: true


    - name: Add environment configuration reset on venv deactivation
      ansible.builtin.blockinfile:
        path: "{{ working_directory }}/{{ python_venv_dirname | default('.venv') }}/bin/activate"
        block: |2
          if [ ! "${1:-}" = "nondestructive" ] ; then
              if [ -n "${_OLD_PIP_INDEX:-}" ] ; then
                  PIP_EXTRA_INDEX_URL="${_OLD_PIP_INDEX:-}"
                  export PIP_EXTRA_INDEX_URL
                  unset _OLD_PIP_INDEX
              else
                  unset PIP_EXTRA_INDEX_URL
              fi
          fi

          if [ ! "${1:-}" = "nondestructive" ] ; then
              if [ -n "${_OLD_PIP_BINARY:-}" ] ; then
                  PIP_PREFER_BINARY="${_OLD_PIP_BINARY:-}"
                  export PIP_PREFER_BINARY
                  unset _OLD_PIP_BINARY
              else
                  unset PIP_PREFER_BINARY
              fi
          fi
        state: present
        # regex matching to the end of the deactivate function defined in the bin/activate script:
        insertafter: '(?m)deactivate \(\) {(?:\n^ *$|\n^ {4,}.*$)+'
        append_newline: true
        marker: "# {mark} deactivate block"
        prepend_newline: true

    - name: Export venv vars
      ansible.builtin.set_fact:
        venv_dir: "{{ working_directory }}/{{ python_venv_dirname | default('.venv') }}"
        venv_python: "{{ working_directory }}/{{ python_venv_dirname | default('.venv') }}/bin/python"
        venv_pip: "{{ working_directory }}/{{ python_venv_dirname | default('.venv') }}/bin/pip"
        venv_bin: "{{ working_directory }}/{{ python_venv_dirname | default('.venv') }}/bin/"
