- name: System setup
  hosts: techzone
  tasks:
    - name: Ping my host
      ansible.builtin.ping:

    - name: Create working directory
      ansible.builtin.file:
        path: "{{ working_directory }}"
        state: directory
        owner: "{{ ansible_user }}"
        mode: 0775

    - name: Get RHEL version
      ansible.builtin.shell: rpm -E %rhel
      register: rhel_version

    - name: Print RHEL version
      ansible.builtin.debug:
        msg: "RHEL version: {{ rhel_version.stdout }}"

    - ansible.builtin.rpm_key:
        state: present
        key: "https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ rhel_version.stdout }}"
      become: true
      become_user: root

    - name: Enable enterprise package
      become: true
      become_user: root
      ansible.builtin.dnf:
        name:
          - dnf-plugins-core
          - "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ rhel_version.stdout }}.noarch.rpm"
        state: latest

    - name: Install the 'Development tools' package group
      become: true
      become_user: root
      ansible.builtin.dnf:
        name: '@Development tools'
        state: present

    - name: Install further system dependencies
      become: true
      become_user: root
      ansible.builtin.dnf:
        name:
          - bzip2
          - libxcrypt-compat
          - openssl
        state: latest

- name: Micromamba setup
  hosts: techzone
  tasks:

    - name: Check python install method
      ansible.builtin.meta: end_play
      when: use_pip | default(false) | bool

    - name: "Check if micromamba already exists in {{ micromamba_location }}"
      ansible.builtin.stat:
        path: "{{ micromamba_location }}"
      register: dest_stat

    - name: Install micromamba
      ansible.builtin.import_tasks: support/download-and-extract-micromamba.yml
      when: not dest_stat.stat.exists

    - name: Create environment and install basic dependencies
      ansible.builtin.command:
        argv:
          - micromamba
          - install
          - --yes
          - "--root-prefix={{ conda_dir }}"
          - "--prefix={{ conda_dir }}"
          - --channel=rocketce
          - --channel=defaults
          - "python={{ python_version }}"
          - arrow
          - bcrypt
          - fastapi
          - httptools
          - numpy
          - onnx
          - onnxruntime
          - pandas
          - protobuf
          - pyarrow
          - pytorch-cpu
          - transformers
          - ujson
          - uvicorn
          - huggingface_hub[cli,hf_xet]
  vars:
    arch: linux-ppc64le
    version: latest

- name: PIP Venv Install
  ansible.builtin.import_playbook: "{{ base_dir }}/support/setup-python-venv.yml"
  when: use_pip | default(false) | bool
  vars:
    base_dir: ./

- name: PIP Venv Setup
  hosts: all
  tasks:
    - name: Check python install method
      ansible.builtin.meta: end_play
      when: not use_pip | default(false) | bool

    - name: Install packages
      ansible.builtin.pip:
        virtualenv: "{{ venv_dir }}"
        name:
          - arrow
          - bcrypt
          - fastapi
          - httptools
          - numpy
          - onnx
          - onnxruntime
          - pandas
          - protobuf
          - pyarrow
          - torch
          - transformers
          - ujson
          - uvicorn
          - optimum[onnxruntime]
          - huggingface_hub[cli,hf_xet]
      environment:
        PIP_EXTRA_INDEX_URL: "https://wheels.developerfirst.ibm.com/ppc64le/linux https://repo.fury.io/mgiessing"
        PIP_PREFER_BINARY: "true"


- name: LLM setup
  hosts: techzone
  tasks:

    - name: Set Venv python facts
      ansible.builtin.set_fact:
        python_command: "{{ venv_python }}"
        python_bin: "{{ venv_bin }}/"
      when: use_pip | default(false) | bool

    - name: Set Micromamba python facts
      ansible.builtin.set_fact:
        python_command: "python{{ python_version }}"
        python_bin: "{{ conda_dir }}/bin/"
      when: not use_pip | default(false) | bool


    - name: Download and convert model to onnx
      ansible.builtin.command:
        argv:
          - "{{ python_bin }}/optimum-cli"
          - export
          - onnx
          - --model
          - "{{ model_repository }}"
          - "{{ working_directory }}/model_onnx"

    - name: Copy execution script
      ansible.builtin.copy:
        src: ../scripts/onnxruntime_api.py
        dest: "{{ working_directory }}/onnxruntime_api.py"
        owner: "{{ ansible_user }}"
        mode: u=rw,g=r,o=rwx

    - name: Build parameter list (-)
      ansible.builtin.set_fact:
        uvicorn_args: >-
          {% set result = [] -%}
          {% for key in uvicorn_args.keys() -%}
            {% set ignored = result.extend(["-" + key, uvicorn_args[key] or ""]) -%}
          {%- endfor %}
          {{ result | join(" ") }}
      when: uvicorn_args is defined

    - name: Build parameter list (--)
      ansible.builtin.set_fact:
        uvicorn_argv: >-
          {% set result = [] -%}
          {% for key in uvicorn_argv.keys() -%}
            {% set ignored = result.extend(["--" + key, uvicorn_argv[key] or ""]) -%}
          {%- endfor %}
          {{ result | join(" ") }}
      when: uvicorn_argv is defined

    - name: Default uvicorn parameter list (-)
      ansible.builtin.set_fact:
        uvicorn_args: ""
      when: uvicorn_args is not defined

    - name: Default uvicorn parameter list (--)
      ansible.builtin.set_fact:
        uvicorn_argv: "--host 0.0.0.0 --port 8080"
      when: uvicorn_argv is not defined

    - name: Print parameter lists
      ansible.builtin.debug:
        msg: "Parameters: {{ uvicorn_args }} {{ uvicorn_argv }}"

    - name: Deploy LLM on uvicorn server (detached)
      ansible.builtin.raw: |
        cd {{ working_directory }} && MODEL_ID="{{ working_directory }}/model_onnx" nohup {{ python_bin }}/uvicorn onnxruntime_api:app {{ uvicorn_args }} {{ uvicorn_argv }} </dev/null >/dev/null 2>&1 & sleep 1
      when: detached and auto_start

    - name: Deploy LLM on uvicorn server
      ansible.builtin.raw: |
        cd {{ working_directory }} && MODEL_ID="{{ working_directory }}/model_onnx" {{ python_bin }}uvicorn onnxruntime_api:app {{ uvicorn_args }} {{ uvicorn_argv }}
      when: not detached and auto_start
